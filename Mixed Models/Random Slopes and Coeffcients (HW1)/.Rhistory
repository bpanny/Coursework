# Create a list of summary statistics for each variable in 'variable_list'
summary_list <- lapply(variable_list, function(var) {
summarise(grouped_data,
Mean = mean(!!sym(var), na.rm = TRUE),
Median = median(!!sym(var), na.rm = TRUE),
SD = sd(!!sym(var), na.rm = TRUE),
Min = min(!!sym(var), na.rm = TRUE),
Max = max(!!sym(var), na.rm = TRUE),
Count = sum(!!sym(var))
) %>%
mutate(Variable = var) # Add the variable name as a new column
})
# Combine the summary statistics into a single data frame
summary_data <- bind_rows(summary_list)
return(summary_data)
}
# Example usage:
# Assuming 'df' is your dataframe, 'group_var' is the grouping variable,
# and 'variable_list' is a vector of variable names you want to summarize.
cross_summary <- summarize_function(cross, currentcovid, c("patientage", "female", "black", "coexisting", "influenzavaccine", "los"))
print(cross_summary)
library(tidyverse)
cross <- read_csv("Asthma_cross.csv")
cross %>% group_by(currentcovid) %>% summarise# Load the dplyr package if it's not already loaded
library(dplyr)
library(dplyr)
summarize_function <- function(data, grouping_var, variable_list) {
# Group the data by the 'grouping_var' variable
grouped_data <- data %>%
group_by({{ grouping_var }})
# Create a list of summary statistics for each variable in 'variable_list'
summary_list <- lapply(variable_list, function(var) {
summarise(grouped_data,
Mean = mean(!!sym(var), na.rm = TRUE),
Median = median(!!sym(var), na.rm = TRUE),
SD = sd(!!sym(var), na.rm = TRUE),
Min = min(!!sym(var), na.rm = TRUE),
Max = max(!!sym(var), na.rm = TRUE),
Count = sum(!!sym(var))
) %>%
mutate(Variable = var) # Add the variable name as a new column
})
# Combine the summary statistics into a single data frame
summary_data <- bind_rows(summary_list)
return(summary_data)
}
# Example usage:
# Assuming 'df' is your dataframe, 'group_var' is the grouping variable,
# and 'variable_list' is a vector of variable names you want to summarize.
cross_summary <- summarize_function(cross, currentcovid, c("patientage", "female", "black", "coexisting", "influenzavaccine", "los"))
cross_summary %>% print()
cross %>% summary
cross %>% count(currentcovid)
cross %>% count(currentcovid, female)
cross %>% summary
cross %>% summarise(sd(los))
cross %>% summarise(sd(influenzavaccine))
cross %>% summarise(sd(female))
cross_summary %>% print()
cross_summary %>% print()
cross %>% summary
cross %>% summarise(sd(patientage))
cross_summary %>% print()
# Function to perform t-tests for multiple variables by group
perform_t_tests <- function(data, group_var, variables_to_compare) {
t_test_results <- lapply(variables_to_compare, function(variable) {
t_test_result <- t.test(data[[variable]] ~ data[[group_var]])
return(t_test_result)
})
return(t_test_results)
}
# List of variables to compare by group
variables_to_compare <- c("patientage", "los")
# Perform t-tests for each variable by group
t_test_results <- perform_t_tests(data, "currentcovid", variables_to_compare)
# Function to perform t-tests for multiple variables by group
perform_t_tests <- function(data, group_var, variables_to_compare) {
t_test_results <- lapply(variables_to_compare, function(variable) {
t_test_result <- t.test(data[[variable]] ~ data[[group_var]])
return(t_test_result)
})
return(t_test_results)
}
# List of variables to compare by group
variables_to_compare <- c("patientage", "los")
# Perform t-tests for each variable by group
t_test_results <- perform_t_tests(cross, "currentcovid", variables_to_compare)
# Print t-test results
for (i in seq_along(variables_to_compare)) {
cat("T-test for", variables_to_compare[i], ":\n")
print(t_test_results[[i]])
cat("\n")
}
compare_multiple_proportions <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the two categorical variables
contingency_table <- table(data[, group_var], data[, outcome_var])
# Perform a chi-squared test for independence
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'data' is your dataframe, 'group_var' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("female", "black", "coexisting", "influenzavaccine")  # Add your outcome variable names
results <- compare_multiple_proportions(cross, "currentcovid", outcome_vars)
compare_multiple_proportions <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the two categorical variables
contingency_table <- table(data[[group_var]], data[[outcome_var]])
# Perform a chi-squared test for independence
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'cross' is your dataframe, 'currentcovid' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("Outcome1", "Outcome2", "Outcome3")  # Add your outcome variable names
results <- compare_multiple_proportions(cross, "currentcovid", outcome
compare_multiple_proportions <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the two categorical variables
contingency_table <- table(data[[group_var]], data[[outcome_var]])
# Perform a chi-squared test for independence
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'cross' is your dataframe, 'currentcovid' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("Outcome1", "Outcome2", "Outcome3")  # Add your outcome variable names
results <- compare_multiple_proportions(cross, "currentcovid", outcome)
results <- compare_multiple_proportions(cross, "currentcovid", outcome_vars)
compare_multiple_proportions <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the two categorical variables
contingency_table <- table(data[[group_var]], data[[outcome_var]])
# Perform a chi-squared test for independence
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'cross' is your dataframe, 'currentcovid' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("Outcome1", "Outcome2", "Outcome3")  # Add your outcome variable names
results <- compare_multiple_proportions(cross, "currentcovid", outcome_vars)
compare_multiple_proportions <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the two categorical variables
contingency_table <- table(data[[group_var]], data[[outcome_var]])
# Perform a chi-squared test for independence
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'cross' is your dataframe, 'currentcovid' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("female", "black", "coexisting", "influenzavaccine")  # Add your outcome variable names
results <- compare_multiple_proportions(cross, "currentcovid", outcome_vars)
compare_multiple_homogeneity <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the outcome variable and grouping variable
contingency_table <- table(data[[outcome_var]], data[[group_var]])
# Perform a chi-squared test of homogeneity
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test of homogeneity for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'cross' is your dataframe, 'currentcovid' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("female", "black", "coexisting", "influenzavaccine")  # Add your outcome variable names
results <- compare_multiple_homogeneity(cross, "currentcovid", outcome_vars)
contingency_table
table(cross$currentcovid, cross$female)
cross(count(female))
cross %>% count(female, currentcovid)
cross %>% count(female, currentcovid) %>% sum(n)
cross %>% count(female, currentcovid) %>% summarise(sum(n))
cross %>% count(female, currentcovid)
cross %>% ggplot(aes(x=los)) + geom_histogram()
cross %>% lm(los ~ currentcovid + influenzavaccine)
lm(los ~ currentcovid + influenzavaccine, data = cross)
los_lm <- lm(los ~ currentcovid + influenzavaccine, data = cross)
(los_lm <- lm(los ~ currentcovid + influenzavaccine, data = cross)) %>% summary()
cross %>% ggplot(aes(x=los)) + geom_histogram()
(los_lm <- lm(los ~ currentcovid + influenzavaccine + age, data = cross)) %>% summary()
(los_lm <- lm(los ~ currentcovid + influenzavaccine + age, data = cross)) %>% summary()
(los_lm <- lm(los ~ currentcovid + influenzavaccine + patientage, data = cross)) %>% summary()
(los_lm <- lm(los ~ currentcovid + influenzavaccine + patientage + female + black, data = cross)) %>% summary()
cross %>% ggplot(aes(x=los)) + geom_histogram()
cross %>% ggplot(aes(x=log(los))) + geom_histogram()
(los_lm <- lm(log(los) ~ currentcovid + influenzavaccine + patientage + female + black, data = cross)) %>% summary()
(los_lm <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
3.137+.356+.028*7
exp(3.689)
- .356
3.137+.356+.028*7- .356
exp(3.689 - .356)
(los_lm <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
(los_lm_int <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
cross %>% ggplot(aes(x=log(los))) + geom_histogram()
(los_lm_int <- lm(log(los) ~ currentcovid*patientage, data = cross)) %>% summary()
(los_lm <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
(los_lm_int <- lm(log(los) ~ currentcovid*patientage, data = cross)) %>% summary()
cross %>% ggplot(aes(x=log(los))) + geom_histogram()
long <- read_csv("enterprise.csv")
long
long %>% summary
long %>% glimpse
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
long <- read_csv("enterprise.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
enterprise <- read_csv("enterprise.csv")
enterprise
# smoking <- read.dta("smoking.dta")
# fit5 <- lmer(birwt ~ smoke + male + mage + hsgrad + somecoll + collgrad + married + black + kessner2 + kessner3 + novisit + pretri2 + pretri3 + (1 | momid), data = smoking)
# summary(fit5)
fit_3 <- lmer(uclms ~  year + (1 | momid), data = enterprise)
long %>% glimpse
# smoking <- read.dta("smoking.dta")
# fit5 <- lmer(birwt ~ smoke + male + mage + hsgrad + somecoll + collgrad + married + black + kessner2 + kessner3 + novisit + pretri2 + pretri3 + (1 | momid), data = smoking)
# summary(fit5)
# fit_3 <- lmer(uclms ~  year + (1 | momid), data = enterprise)
summary(fit5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
enterprise
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
enterprise <- read_csv("enterprise.csv")
enterprise
enterprise
enterprise
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
enterprise <- read_csv("enterprise.csv")
enterprise <- enterprise %>%
mutate(uclms_diff = uclms - uclms1)
enterprise
fit2 <- lmer(uclms_diff ~ 1 + year*ez + (1 | area), data = enterprise, REML = FALSE)
summary(fit2)
enterprise
enterprise %>% ggplot(aes(x = uclms)) + geom_histogram()
enterprise %>% ggplot(aes(x = uclms_diff)) + geom_histogram()
enterprise %>% ggplot(aes(x = log(uclms))) + geom_histogram()
enterprise %>% ggplot(aes(x = log(uclms_diff))) + geom_histogram()
enterprise %>% ggplot(aes(x = uclms_diff)) + geom_histogram()
summary(fit2)
enterprise
fit2 <- lmer(uclms_diff ~ 1 + time*ez + (1 | area), data = enterprise, REML = FALSE)
summary(fit2)
summary(fit2)
library(lmerTest)
install.packages(lmerTest)
install.packages("lmerTest")
library(lmerTest)
summary(fit2)
lmerTest::summary(fit2)
fit2 <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 | area), data = enterprise, REML = FALSE)
summary(fit2)
ri_fit <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 | area), data = enterprise, REML = FALSE)
summary(ri_fit)
ri_fit <- lmerTest::lmer(uclms ~ 1 + time*ez + (1 | area), data = enterprise, REML = FALSE)
summary(ri_fit)
enterprise %>% filter(time == 1)
enterprise %>% filter(time == 1) %>% print(n=22)
-12025/1345
ri_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 | area), data = enterprise, REML = FALSE)
summary(ri_fit_mle)
ri_fit_reml <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 | area), data = enterprise)
summary(ri_fit_reml)
performance::icc(ri_fit_reml)
install.packages("performance")
performance::icc(ri_fit_reml)
ri_fit_reml <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 | area), data = enterprise)
summary(ri_fit_reml)
performance::icc(ri_fit_reml)
1.179/1.535
ri_fit_reml
ri_fit_reml['Random effects']
ri_fit_reml[1]
ranef(ri_fit_reml)
1.179/(1.535+1.179)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time | area), data = enterprise, REML = FALSE)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time | area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time + ez + (1 + time | area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time | area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time | area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
ri_fit_reml <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise)
summary(ri_fit_reml)
# performance::icc(ri_fit_reml)
summary(ri_fit_reml)
ranef(rc_fit_reml)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_reml <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise)
summary(ri_fit_reml)
# performance::icc(ri_fit_reml)
ranef(rc_fit_reml)
performance::icc(rc_fit_reml)
rc_fit_reml <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time | area), data = enterprise)
performance::icc(rc_fit_reml)
rc_fit_reml <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise)
performance::icc(rc_fit_reml)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time + ez + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time + ez + (1 + time | area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_reml <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise)
summary(ri_fit_reml)
performance::icc(rc_fit_reml)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise, REML = FALSE)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time*ez + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
rc_fit_mle <- lmerTest::lmer(uclms_diff ~ 1 + time+ez + (1 + time || area), data = enterprise, REML = FALSE)
summary(rc_fit_mle)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
cross <- read_csv("Asthma_cross.csv")
cross %>% group_by(currentcovid) %>% summarise# Load the dplyr package if it's not already loaded
library(dplyr)
library(dplyr)
summarize_function <- function(data, grouping_var, variable_list) {
# Group the data by the 'grouping_var' variable
grouped_data <- data %>%
group_by({{ grouping_var }})
# Create a list of summary statistics for each variable in 'variable_list'
summary_list <- lapply(variable_list, function(var) {
summarise(grouped_data,
Mean = mean(!!sym(var), na.rm = TRUE),
Median = median(!!sym(var), na.rm = TRUE),
SD = sd(!!sym(var), na.rm = TRUE),
Min = min(!!sym(var), na.rm = TRUE),
Max = max(!!sym(var), na.rm = TRUE),
Count = sum(!!sym(var))
) %>%
mutate(Variable = var) # Add the variable name as a new column
})
# Combine the summary statistics into a single data frame
summary_data <- bind_rows(summary_list)
return(summary_data)
}
# Example usage:
# Assuming 'df' is your dataframe, 'group_var' is the grouping variable,
# and 'variable_list' is a vector of variable names you want to summarize.
cross_summary <- summarize_function(cross, currentcovid, c("patientage", "female", "black", "coexisting", "influenzavaccine", "los"))
cross_summary %>% print()
cross %>% summarise(sd(patientage))
# Function to perform t-tests for multiple variables by group
perform_t_tests <- function(data, group_var, variables_to_compare) {
t_test_results <- lapply(variables_to_compare, function(variable) {
t_test_result <- t.test(data[[variable]] ~ data[[group_var]])
return(t_test_result)
})
return(t_test_results)
}
# List of variables to compare by group
variables_to_compare <- c("patientage", "los")
# Perform t-tests for each variable by group
t_test_results <- perform_t_tests(cross, "currentcovid", variables_to_compare)
# Print t-test results
for (i in seq_along(variables_to_compare)) {
cat("T-test for", variables_to_compare[i], ":\n")
print(t_test_results[[i]])
cat("\n")
}
compare_multiple_homogeneity <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the outcome variable and grouping variable
contingency_table <- table(data[[outcome_var]], data[[group_var]])
# Perform a chi-squared test of homogeneity
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test of homogeneity for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'cross' is your dataframe, 'currentcovid' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("female", "black", "coexisting", "influenzavaccine")  # Add your outcome variable names
results <- compare_multiple_homogeneity(cross, "currentcovid", outcome_vars)
table(cross$currentcovid, cross$female)
cross %>% count(female, currentcovid)
compare_multiple_proportions <- function(data, group_var, outcome_vars) {
results <- list()
for (outcome_var in outcome_vars) {
# Create a contingency table (cross-tabulation) of the two categorical variables
contingency_table <- table(data[[group_var]], data[[outcome_var]])
# Perform a chi-squared test for independence
chi_squared_result <- chisq.test(contingency_table)
# Store the chi-squared test result in the list with the outcome variable name as the key
results[[outcome_var]] <- chi_squared_result
# Print the chi-squared test result for each outcome
cat("Chi-squared test for", outcome_var, ":\n")
print(chi_squared_result)
cat("\n")
}
return(results)
}
# Example usage:
# Assuming 'cross' is your dataframe, 'currentcovid' is the grouping variable,
# and 'outcome_vars' is a vector of outcome variable names you want to compare.
outcome_vars <- c("female", "black", "coexisting", "influenzavaccine")  # Add your outcome variable names
results <- compare_multiple_proportions(cross, "currentcovid", outcome_vars)
(los_lm <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
(los_lm_int <- lm(log(los) ~ currentcovid*patientage, data = cross)) %>% summary()
cross %>% ggplot(aes(x=log(los))) + geom_histogram()
3.137+.356+.028*7- .356
exp(3.689 - .356)
cross
# (los_lm <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
# (los_lm_int <- lm(log(los) ~ currentcovid*patientage, data = cross)) %>% summary()
step(lm(log(los) ~ . - personid, data = cross), scope = list(upper = ~patientage+female+black+currentcovid+coexisting+influenzavaccine, lower = ~1), direction = "backward")
# (los_lm <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
# (los_lm_int <- lm(log(los) ~ currentcovid*patientage, data = cross)) %>% summary()
step(lm(log(los) ~ . - personid, data = cross), scope = list(upper = ~patientage+currentcovid+coexisting+influenzavaccine+female+black, lower = ~1), direction = "backward")
lm(log(los)~patientage+black+currentcovid+coexisting, data = cross)
lm(log(los)~patientage+black+currentcovid+coexisting, data = cross) %>% summary
step(lm(log(los) ~ (.-personid)*(.-personid), data = cross), scope = list(upper = ~(.-personid)*(.-personid), lower = ~patientage+black+currentcovid+coexisting), direction = "backward"))
step(lm(log(los) ~ (.-personid)*(.-personid), data = cross), scope = list(upper = ~(.-personid)*(.-personid), lower = ~patientage+black+currentcovid+coexisting, direction = "backward"))
# (los_lm <- lm(log(los) ~ currentcovid + patientage, data = cross)) %>% summary()
# (los_lm_int <- lm(log(los) ~ currentcovid*patientage, data = cross)) %>% summary()
step(lm(log(los) ~ . - personid, data = cross), scope = list(upper = ~patientage+currentcovid+coexisting+influenzavaccine+female+black, lower = ~1), direction = "backward")
step(lm(log(los) ~ patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, data = cross), scope = list(upper = ~patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, lower = ~patientage+black+currentcovid+coexisting), direction = "backward")
step(lm(log(los) ~ patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, data = cross), scope = list(upper = ~patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, lower = ~patientage+black+currentcovid+coexisting), direction = "backward") %>% coef
step(lm(log(los) ~ patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, data = cross), scope = list(upper = ~patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, lower = ~patientage+black+currentcovid+coexisting), direction = "backward")
3.213+.02*7
3.353 %>% exp
3.213+.189+(0.02+0.026)*7
3.724 %>% exp
step(lm(log(los) ~ patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, data = cross), scope = list(upper = ~patientage+black+currentcovid+coexisting + patientage:black + patientage:currentcovid + patientage:coexisting + black:currentcovid + black:coexisting + currentcovid:coexisting, lower = ~patientage+black+currentcovid+coexisting), direction = "backward")
lm(log(los) ~ patientage + black + currentcovid + coexisting + patientage:currentcovid + currentcovid:coexisting, data = cross)
lm(log(los) ~ patientage + black + currentcovid + coexisting + patientage:currentcovid + currentcovid:coexisting, data = cross) %>% summary
3.124+.027*7+.337
3.124+.027*7+.337 %>% exp
3.65 %>% exp
3.124+.027*7
3.313 %>% exp
