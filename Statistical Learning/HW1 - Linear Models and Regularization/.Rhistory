knitr::opts_chunk$set(echo = TRUE)
library(recommenderlab)
library(data.table)
library(tidyverse)
library(caret)
library(patchwork)
#created by python tutorial
train <- fread(here::here("train.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(tidyverse)
cars <- Carseats
cars %>% glimpse
glm1 <- cars %>% glm(Sales ~ Price + Urban + US, data = .)
glm1_sum <- summary(glm1)
glm1_sum
glm2 <- cars %>% glm(Sales ~ Price + US, data = .)
glm2_sum <- summary(glm2)
glm2_sum
anova(glm2, glm1)
confint(glm2)
library(caret)
lmControl_5k <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
lmControl_loo <- trainControl(method = "LOOCV")
lm2_5k <- train(formula(glm2),
data = cars,
method = "lm",
trControl = lmControl_5k)
lm2_loo <- train(formula(glm2),
data = cars,
method = "lm",
trControl = lmControl_loo)
lm1_5k <- train(formula(glm1),
data = cars,
method = "lm",
trControl = lmControl_5k)
lm1_loo <- train(formula(glm1),
data = cars,
method = "lm",
trControl = lmControl_loo)
resamps <- resamples(list(lm1_5k = lm1_5k,
lm2_5k = lm2_5k))
summary(resamps)
summary(lm1_loo);  summary(lm2_loo)
dotplot(resamps)
load('prostate.Rdata')
prostate <- data; rm(data)
prostate$x %>% dim
prostate$y  %>% length()
p_tbl <- as_tibble(prostate$x) %>%
mutate(lpsa = prostate$y)
trainIndex <- createDataPartition(p_tbl$lpsa, p = .5,
list = FALSE,
times = 1)
p_tbl_train <- p_tbl[trainIndex,]
p_tbl_test <- p_tbl[-trainIndex,]
ols_estimates <- function(X, Y){
solve(t(X)%*%X)%*%t(X)%*%Y
}
calc_rmse <- function(y, pred_y){
(pred_y - y)^2 / len(y)
}
train_matrix <- as.matrix(p_tbl_train)
# 211 is the lpsa column
train_X <- train_matrix[,-211]
train_Y <- train_matrix[,211]
train_beta_ols <- ols_estimates(train_X, train_Y)
lm(lpsa~., data=p_tbl_train)
p_tbl_train
p_tbl_train %>% glimpse
lm(lpsa~., data=p_tbl_train)
lm(lpsa~., data=p_tbl_train) %>% summary
cor(train_X)
train_cor <- cor(your_data)
train_cor <- cor(train_X)
train_cor[upper.tri(train_cor)] <- 0
diag(train_cor) <- 0
train_X_pruned <- train_X[, !apply(train_cor, 2, function(x) any(abs(x) > 0.99))]
train_X_pruned %>% dim
train_cor <- cor(train_X)
train_cor[upper.tri(train_cor)] <- 0
diag(train_cor) <- 0
train_X_pruned <- train_X[, !apply(train_cor, 2, function(x) any(abs(x) > 0.8))]
train_X_pruned %>% dim
train_cor <- cor(train_X)
train_cor[upper.tri(train_cor)] <- 0
diag(train_cor) <- 0
train_X_pruned <- train_X[, !apply(train_cor, 2, function(x) any(abs(x) > 0.8))]
train_X_pruned %>% dim()
149/210
train_beta_ols <- ols_estimates(train_X_pruned, train_Y)
train_X_pruned <- train_X[, !apply(train_cor, 2, function(x) any(abs(x) > 0.5))]
train_X_pruned %>% dim()
train_X_pruned <- train_X[, !apply(train_cor, 2, function(x) any(abs(x) > 0.7))]
train_X_pruned %>% dim()
train_beta_ols <- ols_estimates(train_X_pruned, train_Y)
ols_estimates <- function(X, Y){
solve(t(X)%*%X)%*%t(X)%*%Y
}
calc_rmse <- function(y, pred_y){
(pred_y - y)^2 / len(y)
}
train_matrix <- as.matrix(p_tbl_train)
# 211 is the lpsa column
train_X <- train_matrix[,-211]
train_Y <- train_matrix[,211]
train_beta_ols <- ols_estimates(train_X, train_Y)
train_cor <- cor(train_X)
train_cor[upper.tri(train_cor)] <- 0
diag(train_cor) <- 0
train_X_pruned <- train_X[, !apply(train_cor, 2, function(x) any(abs(x) > 0.8))]
train_X_pruned %>% dim()
train_beta_ols <- ols_estimates(train_X_pruned, train_Y)
train_X_pruned <- train_X[, !apply(train_cor, 2, function(x) any(abs(x) > 0.7))]
train_X_pruned %>% dim()
train_beta_ols <- ols_estimates(train_X_pruned, train_Y)
79/210
train_X_pruned_covs <- colnames(train_X_pruned)
train_X_pruned_covs
test_X <- test_matrix[,train_X_pruned_covs]
test_matrix <- as.matrix(p_tbl_test)
test_X <- test_matrix[,train_X_pruned_covs]
test_X %>% colnames
train_X_pruned_covs <- colnames(train_X_pruned)
test_matrix <- as.matrix(p_tbl_test)
test_X <- test_matrix[,train_X_pruned_covs]
test_Y <- test_matrix[,211]
pred_vector <- test_X%*%train_beta_ols
len(test_Y)
length(test_y)
length(test_Y)
calc_rmse <- function(y, pred_y){
sqrt( (pred_y - y)^2 / length(y) )
}
ols_rmse <- calc_rmse(test_Y, pred_vector)
ols_rmse
calc_rmse <- function(y, pred_y){
sqrt( sum( (pred_y - y)^2 ) / length(y) )
}
ols_rmse <- calc_rmse(test_Y, pred_vector)
ols_rmse
calc_rmse <- function(y, pred_y){
sqrt( sum( (pred_y - y)^2 ) / length(y) )
}
(ols_rmse <- calc_rmse(test_Y, pred_vector))
?trainControl
p_tbl_train[,train_X_pruned_covs]
p_tbl_train[,train_X_pruned_covs] %>% glimse
p_tbl_train[,train_X_pruned_covs] %>% glimpse
p_tbl_train %>% glimpse
p_tbl_train[,c(train_X_pruned_covs, 'lpsa')] %>% glimpse
p_tbl_train[,c(train_X_pruned_covs, 'lpsa')] %>% dim
?glmnet
install.packages('glmnet')
?glmnet
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(.alpha = 1, .lambda = seq(0.0001, 1, length = 100))
# Train the model
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
ridge1
plot(ridge1)
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(.alpha = 0, .lambda = seq(0.0001, 1, length = 100))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(.alpha = 0, .lambda = seq(0.0001, 1, length = 100))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
plot(ridge1)
ridge1$bestTune
tuneRidge
tuneRidge %>% glimpse
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(.alpha = 0, .lambda = seq(0.09,0.001,by=-0.001))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
plot(ridge1)
ridge1$bestTune
seq(.0001,0.1,by=0.001)
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(.alpha = 0, .lambda = seq(.0001,0.1,by=0.001))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
plot(ridge1)
ridge1$bestTune
seq(.0001,.5,by=0.001)
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(.alpha = 0, .lambda = seq(.0001,.5,by=0.001))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
plot(ridge1)
ridge1$bestTune
p_tbl_train
p_tbl_train %>% glimpse
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(.alpha = 0, .lambda = seq(.0001,.1,by=0.001))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
ridge2 <- train(lpsa ~ .,
data = p_tbl_train[,c(train_X_pruned_covs,'lpsa')],
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
plot(ridge1);plot(ridge2)
ridge1$bestTune;ridge2$bestTune
seq(.001,1,by=0.001)
ridge3 <- train(lpsa ~ .,
data = p_tbl_train[,c(train_X_pruned_covs,'lpsa')],
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge3)
tuneRidge3 <- expand.grid(.alpha = 0, .lambda = seq(.0001,.5,by=0.001))
ridge3 <- train(lpsa ~ .,
data = p_tbl_train[,c(train_X_pruned_covs,'lpsa')],
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge3)
ridge3 <- train(lpsa ~ .,
data = p_tbl_train[,c(train_X_pruned_covs,'lpsa')],
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge3)
plot(ridge1);plot(ridge2)
ridge1$bestT
ne;ridge2$bestTune
plot(ridge1);plot(ridge2);plot(ridge3)
ridge1$bestTune;ridge2$bestTune;ridge3$bestTune
plot(ridge1);plot(ridge2);plot(ridge3)
ridge1$bestTune;ridge2$bestTune;ridge3$bestTune
ridge1$finalModel
ridge1$finalModel %>% glimpse
ridge1$finalModel$beta
ridge1$finalModel$beta %>% glimpse
train_X %>% dim
lambda=1
lambda %*% diag(nrow=ncol(train_X))
diag(nrow=ncol(train_X))%*%lambda
diag(nrow=ncol(train_X))*lambda
lambda*diag(nrow=ncol(train_X))
lambda*diag(nrow=ncol(train_X)) %>% [,1]
lambda*diag(nrow=ncol(train_X)) %>% colSums
lambda*diag(nrow=ncol(train_X)) %>% rowSums
lambda=9
lambda*diag(nrow=ncol(train_X)) %>% rowSums
ridge_estimates <- function(X, Y, lambda){
solve(t(X)%*%X + lambda * diag(nrow=nrow(X)))%*%t(X)%*%Y
}
train_beta_ridge <- ridge_estimates(train_X, train_Y, lambda=0.0991)
train_X
train_X %>% dim
ridge_estimates <- function(X, Y, lambda){
solve(t(X)%*%X + lambda * diag(nrow=ncol(X)))%*%t(X)%*%Y
}
train_beta_ridge <- ridge_estimates(train_X, train_Y, lambda=0.0991)
train_beta_ridge
ridge_estimates <- function(X, Y, lambda){
solve(t(X)%*%X + lambda * diag(nrow=ncol(X)))%*%t(X)%*%Y
}
train_beta_ridge <- ridge_estimates(train_X, train_Y, lambda=0.0991)
ridge_preds <- test_X %*% train_beta_ridge
train_X_pruned_covs <- colnames(train_X_pruned)
test_matrix <- as.matrix(p_tbl_test)
test_X_pruned <- test_matrix[,train_X_pruned_covs]
test_Y <- test_matrix[,211]
pred_vector <- test_X_pruned%*%train_beta_ols
calc_rmse <- function(y, pred_y){
sqrt( sum( (pred_y - y)^2 ) / length(y) )
}
(ols_rmse <- calc_rmse(test_Y, pred_vector))
train_X_pruned_covs <- colnames(train_X_pruned)
test_matrix <- as.matrix(p_tbl_test)
test_X_pruned <- test_matrix[,train_X_pruned_covs]
test_X <- test_matrix[,-211]
test_Y <- test_matrix[,211]
pred_vector <- test_X_pruned%*%train_beta_ols
ridge_estimates <- function(X, Y, lambda){
solve(t(X)%*%X + lambda * diag(nrow=ncol(X)))%*%t(X)%*%Y
}
train_beta_ridge <- ridge_estimates(train_X, train_Y, lambda=0.0991)
ridge_preds <- test_X %*% train_beta_ridge
ridge_rmse <- calc_rmse(y = test_Y, pred_y = ridge_preds)
ridge_estimates <- function(X, Y, lambda){
solve(t(X)%*%X + lambda * diag(nrow=ncol(X)))%*%t(X)%*%Y
}
train_beta_ridge <- ridge_estimates(train_X, train_Y, lambda=0.0991)
ridge_preds <- test_X %*% train_beta_ridge
ridge_rmse <- calc_rmse(y = test_Y, pred_y = ridge_preds)
ridge_rmse
lassoControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tunelasso <- expand.grid(.alpha = 1, .lambda = seq(.0001,1,by=0.001))
lasso1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = lassoControl,
tuneGrid = tunelasso)
lasso2 <- train(lpsa ~ .,
data = p_tbl_train[,c(train_X_pruned_covs,'lpsa')],
method = "glmnet",
trControl = lassoControl,
tuneGrid = tunelasso)
plot(lasso1);plot(lasso2);
lasso1$bestTune;lasso2$bestTune
lasso_beta_estimates <- coef(lasso1$finalModel, lasso1$bestTune$.lambda)
lasso_beta_estimates <- coef(lasso1$finalModel, lasso1$bestTune$.lambda)
lasso_pred_y <- test_X %*% lasso_beta_estimates
lasso_beta_estimates
lasso_beta_estimates %>% glimpse
lasso_beta_estimates %>% dim
lasso_beta_estimates
lasso_beta_estimates <- coef(lasso1$finalModel, lasso1$bestTune$.lambda)
lasso_pred_y <- predict(lasso1, newdata=test_X)
lasso_rmse <- calc_rmse(y=test_Y, pred_y=lasso_pred_y)
lasso_rmse
tibble(beta_type = c("OLS", "Ridge", "Lasso"),
rmse = c(ols_rmse, ridge_rmse, lasso_rmse)) %>%
kableExtra::kable() %>% kableExtra::kable_styling
tibble(beta_type = c("OLS", "Ridge", "Lasso"),
rmse = c(ols_rmse, ridge_rmse, lasso_rmse)) %>%
kableExtra::kable() %>% kableExtra::kable_styling()
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(alpha = 0, lambda = seq(.0001,1,by=0.001))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
ridgeControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
tuneRidge <- expand.grid(alpha = 0, lambda = seq(.0001,1,by=0.001))
ridge1 <- train(lpsa ~ .,
data = p_tbl_train,
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
ridge2 <- train(lpsa ~ .,
data = p_tbl_train[,c(train_X_pruned_covs,'lpsa')],
method = "glmnet",
trControl = ridgeControl,
tuneGrid = tuneRidge)
plot(ridge1);plot(ridge2)
ridge1$bestTune;ridge2$bestTune
ridge_estimates <- function(X, Y, lambda){
solve(t(X)%*%X + lambda * diag(nrow=ncol(X)))%*%t(X)%*%Y
}
train_beta_ridge <- ridge_estimates(train_X, train_Y, lambda=0.9991)
ridge_preds <- test_X %*% train_beta_ridge
ridge_rmse <- calc_rmse(y = test_Y, pred_y = ridge_preds)
ridge_rmse
ridge2$results
ridge2$results$RMSE
ridge2$results$RMSE %>% mean
ridge1$results$RMSE %>% mean
ridge1$results$RMSE
